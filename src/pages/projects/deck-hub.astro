---
import { Image } from 'astro:assets';
import Layout from "../../layouts/Layout.astro";
import { Icon } from 'astro-icon/components'
import { clsx } from "clsx";
import localDeckHub from '../../images/deckHub.png';
import localDeckHubFilters from '../../images/dhFilters.png';
import localHoverCard from '../../images/hoverCard.png';

export interface TechStack {
  name: string;
  icon: string;
  styles: string;
}

const techStack: TechStack[] = [
  {
    name: "Typescript",
    icon: "typescript",
    styles: "p-2",
  },
  { name: "React", icon: "logos:react", styles: "p-2" },
  {
    name: "GQL Request",
    icon: "logos:graphql",
    styles: "p-3",
  },
  { name: "NextJS", icon: "next", styles: "p-1" },
  { name: "Jotai", icon: "jotai", styles: "p-2" },
  { name: "TailwindCSS", icon: "logos:tailwindcss-icon", styles: "p-2" },
  { name: "HeadlessUI", icon: "headless", styles: "p-2" },
  { name: "ChartJS", icon: "chartjs", styles: "p-1" },
  { name: "Vercel", icon: "tabler:brand-vercel", styles: "p-2" },
];
---

<Layout title="projects">
  <div
    class="mb-12 mt-0 flex w-full max-w-7xl flex-col justify-start gap-0 overflow-auto p-8 text-black dark:text-white lg:mt-16 xl:p-0">
    <!-- ====== About Section Start -->
    <section class="overflow-hidden">
      <div class="container mx-auto">
        <div class="-mx-4 flex flex-wrap items-center justify-between">
          <div class="w-full px-4">
            <div class="lg:mt-0">
              <h2 class="text-dark mb-8 text-6xl font-bold">Deck Hub</h2>
              <p class="mb-8 text-lg">
                A deck builder app for <a
                  href="https://parallel.life/"
                  target="_blank"
                  rel="noopener noreferrer"
                  class="underline">Parallel,</a
                >
                a digital card game similar to Magic the Gathering, or Hearthstone.
              </p>
              <div class="flex gap-8">
                <div class="flex">
                  <a
                    href=""
                    target="_blank"
                    rel="noopener noreferrer"
                    class="relative inline-flex items-center justify-center rounded-br-lg border border-transparent text-sm font-medium text-neutral-700 hover:text-gray-500 dark:text-neutral-400">
                    <Icon name="mdi:github" class="w-6 h-6" />
                    <span class="ml-1 text-lg font-bold">Code</span>
                  </a>
                </div>
                <div class="flex">
                  <a
                    href=""
                    target="_blank"
                    rel="noopener noreferrer"
                    class="relative inline-flex items-center justify-center rounded-br-lg border border-transparent text-sm font-medium text-neutral-700 hover:text-gray-500 dark:text-neutral-400">
                    <Icon name="iconoir:www" class="w-6 h-6" />
                    <span class="ml-1 text-lg font-bold">Live</span>
                  </a>
                </div>
              </div>
            </div>
          </div>
          <div class="w-full lg:w-4/6">
            <div class="-mx-3 flex items-center sm:-mx-4">
              <div class="flex w-full items-center justify-center p-4"></div>
            </div>
          </div>
        </div>
      </div>
    </section>
    <div class="mb-16 p-2">
      <Image
        src={localDeckHub}
        alt="Deck Hub"
        class="rounded-lg shadow-xl dark:border dark:border-neutral-600"
      />
    </div>
    <!-- ====== About Section End -->
    <ul
      class="min-w-1/2 mx-auto mb-12 flex flex-wrap items-center justify-center gap-8 rounded-xl border p-4 shadow-lg dark:border-neutral-600">
      {
        techStack.map((tech) => (
          <li class="flex items-center gap-2 p-2">
            <div
              title={tech.name}
              class={clsx(
                tech.styles,
                "flex h-16 w-16 items-center justify-center rounded-2xl bg-slate-200 shadow-lg dark:bg-slate-700"
              )}>
              <Icon name={tech.icon} class="h-16 w-16" />
            </div>
          </li>
        ))
      }
    </ul>
    <div class="mt-8 flex max-w-5xl flex-col gap-8">
      <div class="flex w-full flex-col items-center gap-16">
        <div class="flex w-full flex-col items-start gap-8 lg:w-3/4">
          <p class="mb-4 text-3xl font-bold">Did we really need another one?</p>
          <div class="flex w-full justify-center">
            <div class="flex w-full flex-row items-center gap-8 text-lg md:w-full">
              <div class="flex w-full flex-col gap-8 lg:w-3/4">
                <p>
                  It's true that there are several other deck builders in existance. However, they
                  all lack the visual deck building aspect that I love.
                </p>
                <p>
                  For me, it is much easier to keep track of the cards in my deck or identify the
                  ones that need to be changed if I can see them visually. Other deck builders
                  usually represent the active deck by showing only the card name and the numerical
                  count of each card. However, I prefer a visual representation of my deck, which
                  was a significant motivation for building this app.
                </p>
              </div>
            </div>
          </div>
        </div>
        <div class="flex w-full flex-col items-start gap-8 lg:w-3/4">
          <p class="mb-4 text-3xl font-bold">Everything everywhere all at once</p>
          <div class="flex w-full justify-center">
            <div class="flex w-full flex-row items-center gap-8 text-lg md:w-full">
              <div class="flex w-full flex-col gap-8 lg:w-3/4">
                <p>
                  There was a lot of state that needed to be consumed in many different places
                  throughout the app. I could have just declared all the state at the highest parent
                  component and passed it down to where it was needed. Unfortunately, this would
                  lead to some quite ugly prop drilling.
                </p>
                <p>
                  React context was an option I considered to handle global state, but it would
                  cause a lot of unnecessary re-renders, leading to performance concerns. I came
                  across Jotai, and quickly realized it was the perfect solution for me. Jotai
                  handles the performance issues while providing an unbelievably simple and
                  intuitive developer experience (DX).
                </p>
              </div>
            </div>
          </div>
        </div>
        <div class="flex w-full flex-col gap-8 lg:w-3/4">
          <p class="mb-4 text-3xl font-bold">Hover Me!</p>
          <div class="flex w-full justify-center">
            <div class="flex w-full flex-col items-start gap-8 text-lg md:w-full">
              <div class="flex w-full items-start justify-center gap-8">
                <Image
                  src={localHoverCard}
                  alt="Hover Card"
                  class="rounded-lg shadow-xl dark:border dark:border-neutral-600"
                />
              </div>

              <div class="flex w-full flex-col items-start gap-8 lg:w-3/4">
                <p>
                  With the hover toggle enabled anytime you hover over a card the above card pops
                  up. It displays detailed information about each card including it's in game stats.
                  I also added a toggle for this feature. This way a user can choose to see the
                  hovers or not.
                </p>
                <p>
                  To ensure accessibility standards and functionality, I used the Radix UI Hover
                  Card Primitive.
                </p>
              </div>
            </div>
          </div>
        </div>
        <div class="flex w-full flex-col gap-8 lg:w-3/4">
          <p class="mb-4 text-3xl font-bold">Filters, Filters, Filters</p>
          <div class="flex w-full justify-start">
            <div class="flex w-full flex-col items-start gap-8 text-lg md:w-full">
              <Image
                src={localDeckHubFilters}
                alt="Filters"
                class="rounded-lg shadow-xl dark:border dark:border-neutral-600"
              />
              <div class="flex w-full flex-col gap-8 lg:w-3/4">
                <p>
                  Handling the state for almost 30 unique card filter options was quite challenging
                  for me.
                </p>
                <p>
                  I leveraged React's useEffect hook to re set all filter state each time a filter
                  was added or removed. This way the displayed cards updated correctly in real-time.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>
